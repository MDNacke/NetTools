#!/usr/bin/env python

##########################################################################
## Create a socket on the Public IP for the port passed on this server  ##
## Version 1.0                                                          ##
##########################################################################

import socket
import sys
import os
import subprocess
import signal
from optparse import OptionParser

scriptName =os.path.basename(sys.argv[0])

Python_Version = str(sys.version_info[0])
Python_Release = str(sys.version_info[1])
Python_Mod     = str(sys.version_info[2])

class GracefulKiller:
    kill_now = False
    def __init__(self):
         signal.signal(signal.SIGINT, self.exit_gracefully)
         signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self,signum, frame):
         self.kill_now = True

def getPublicIP():
        proc = subprocess.Popen(["getent hosts `hostname`| awk '{print $1}'"], stdout=subprocess.PIPE, shell=True)
        (out, err) = proc.communicate()
        getIP = out
        if ( Python_Version > '2' ):
            getIP = "".join(map(chr, getIP))
        getIP = getIP.rstrip('\n')

        return getIP

def main():
    server_address = getPublicIP()

    # Sets up OptParse to fetch cmd line options and
    #   returns the (options, args) tuple"""
    usage = scriptName +" -p <port number>"
    parser = OptionParser(usage)
    parser.add_option("-p", "--portnum", help="The local port to open")

    (options, args) = parser.parse_args()
    if options.portnum is None:
        print (' ')
        parser.error("wrong number of arguments")
        print (usage)

    portid = int(options.portnum)

    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to the port
    address_port = (server_address, portid)
    print (' ')
    print ('Starting up on %s port %s' % address_port)
    sock.bind(address_port)

    # Listen for incoming connections
    sock.listen(1)

    while True:
        # Wait for a connection
        print("waiting for a connection")
        try:
            connection, client_address = sock.accept()

        except socket.error as exc:
            errorNum, msgString = exc
            print (' ')
            if errorNum == 4:
                print ('SIGTERM trapped. Shutting down')
            else:
                print (msgString)
            sys.exit(1)

    ##
        try:
            print ('    Connection from', client_address)

            # Receive the data in small chunks and retransmit it
            while True:
                data = connection.recv(80)
                print ('    Received "%s"' % data)
                if data:
                    print ('    Sending data back to the client')
                    connection.sendall(data)
                else:
                    print ('    No more data from', client_address)
                    break

        finally:
            # Clean up the connection
            connection.close()

if __name__ == '__main__':
    killer = GracefulKiller()
    main()